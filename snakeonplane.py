garden = '''╔══════════════════════════════════════════════════════════════════════╗
║;~~;.~;,~~,..;,,``;~`;`,,~`.,`,;~.~~,.;`,.;`~~;`;.~`,`.┌;~;.;~`;;;.`┐`║
║;.~,~~;`,`;.~~,~,;┌;,~.~,;.;~,.~,..,;`.~.~;~,,~;~~,,.`..`┐`.~.~,`.~.;;║
║,`~.,~.~`....,`~`,`~,┌;`~`,.;,,.`~,`..~,┐~;~;,.;`.`,`,`,;~.~;,,;;,.`~~║
║;~,``;`,`.;~~`..``,;.;;~``.;`,;.`~~.;`~~~~;`;;;~~;,.``,;.,;~``,`;,`,.`║
║.`,,.,;``~~`┌`.;;.`~..~~.;~,~`.~,┐;.;;..`~~,~`~`..`;~`;~~,.,```;`,~`~;║
║.`;.;.;;~;,┌.~;`;.~,`~;`.;,~`,`;~,~.;┐~`~;.;;;;`;,~;;~;`;;~,.,.,~..,.`║
║,;.;;;;;;;~;~.~`.```,~.....~~`;.~,,;;``;.`.┌.~`.`.,,.`┐,~.~``..~``~`~~║
║`;~.`~,`~;;```~~.;;;;~`~;,~,`~;.``,`.~,~~~~;┌,;`,~`;;.,..;~~.~┐.~..,.;║
║~.`;;..~;,`,.,;`.,~`;``~`..,`.```;~~.;;.~┌;,;~;``.;;┐~.`,`,,``,;~;~;`~║
║~┌,,,..~`~.;~.~;``.;.;~,.`┐`~,,~`.;,;,~;.,;~.~;;`,`;,`;.,;~``,.~;,..`.║
║~,.~┌..`,.;~.,;┐;~.`~.;,~.~,`~.~,`;~``~~`;~,~;;.,.~.;,`,.`;`.`~;,;``;,║
║`..~~..,,`;.~~~~,;~~,~~.~,`~`;~;;;.~,.,.~.,.;`;~,``,`,~;,`.;`;,;`~;,,;║
║~.`.~~~..~.;..``~`;;,``;,``.~;`.;;,`;`~~;;,`└;.;,..~.,`;~;~`~`┘~`~;,;.║
║~.`,..~~```.,.;`,,``~`.`;,.;.~,;;,`~.`..`~`~`~.,~;;,```.┌~.,.,`~..┐~;~║
║~.,``┌┐`~,;~~..~;~~`,,.~;~.`~;.,,,~..;,.,.~~;;~~.;```~`.~,`~`.~.`~.,,.║
║~`~~~....`~,;..`~;`,,~.;.~~~,.;`,,~;.;;,,;;``,,~`.;.,.,.~;.``┌,┐;~`~`;║
║~``~;;~`~~.,,.;~`.`,.;,,..~;~;.;;,`.;~``;.,;..~~;~~.`;;`~,`~;``,~.;;;~║
║~~;.└;``,~,`,,~┘````...~.;,~~`,~,.`.;`.;.,~;.`..,,;.~,,~;``.~,~,.;`.`.║
║;,,.,~;┌~`┐`,,`,`.,~~;.;~`~,.;,``;..`...`;,,,;..;.~~;.,;;;~.;;;,`.~..;║
║`;,┌..;~,`~;`~,`~.,,`~,~┐.~;`;.~;`;,;;~~`,;,;,`~;.`,;.~;.,~.~;~;;~.``;║
║.~.;,;`~,,;~;~;`,~,~~~```,,~;``;~~;.`,~`~~~.~,,,~~,,`,`.`~`;`,.~~``.~,║
║`.`~,;..┌`;~`;,;.`.,.~,`,,.~~;`.~`,,`,┐.,.`,;.~,,;~;,,.;,,,`,`.;.~~;;,║
║~;;.,,.;~,,,└..,`.``~,,,`;~~..`.~┘~.,;,,.~`;;.``;~,`;.~``.;...`,~,.,`~║
║;.;;;.,~`~```.`.,`└`,..~`~`.;`;`;~,~.``~``~.~..;.~;;;,.,;┘.`~,,~,,~;~`║
║`~,``;~,└.;.``,,~;..`,,`,,``;`~`.~.,;~┘..,,,;,~..,`..`~~~..``.``.;,~.`║
║,``..`,~.,,~;`,``.;~,,;,,,.`.`;~~;.`~~~;,.,``;~~`┌┐..`~`,~.,`;,.~,,`;~║
║;~`,,~,..`;,;,`,`~,..``,.~,;,;.~`~,..,```.,.;`.~~`;`;,;~`,;,,└.┘.```,~║
║.;,~.`,`~;.;~,.,;;;~,;;~~,,;;.~`;,~;,.~`,`;,..`~;~.`,`,,;,;~`~,`.`....║
║~``,~;,`~`.,;``,.;,;.,...`,.,`.~,~`┌;~~;`,.`.;┐~`;``,`,.`.;;,.;;~;.`;`║
║~`,`~`.;`,,,,`;,┌;`.``,~~,,.,~`,~,,.;~.;;`.;;.;,,..~;┐.`,`..`,`~`~.`~;║
║,;`;.;```,~..~;`,,`.;`~``.~~..,~.`;.,,~~;└`,~~~.`,`.┘.,``.`;`,~~`.`;.,║
║,..`,,~..;.,``┌.~```.,;;~.;`.~~`,;`~.`,;..~;~.,`.;;```,,,`~~;.,.`,,;~┐║
║.,`~,`~;,`,,;,,.└;.,.;~.,;`.,`.`;~,;~.,;~;~`~.;.`;`.`┘~;`.~,~.;~,;,,~,║
║`~,.,~;.;.`~`~.~.,,`~``┌.;.`.~;~`;;,~~~,;;~;,~`.~`,`~`.~,~~;,,.~┐;;,,`║
║,,~~`~~.,`;;.;`~,`~~``;``;~.~;.;┌,`,┐`~,,;.,,~``,~~.`;;,`.;~,;;~,`.;.`║
║┌;``,~.`;;~;`~~~~;~,~,;;~`.;.~.┐,,;~`;~;`.`;`.,;``,``,`,`.`~,~~`.,.~~.║
║..,.`.;~,~;;.;```.`~.;,`;;~,,;.~;;.`,;;````,`,`;.;~,,.~;`.~;┌`.,..,┐`,║
║~.;.,.`.```;~,`;`;;┌`,;,~~`;~,,,.~,~,.,~~,~`...`.,,;`~~;`;`..;,,.┐,;.~║
║;;┌~~;`;;~.`~;.~.;~;;`.~.,.~┐~.;.`~;.~`~..`;`,,``~`;,;~~.;,~~..``~...,║
║`;`.`.``;;,~~`└;;`,~,~,,,;.;;~~..;`;,...,;~;~;`~;;~;````,`~~~.~.~;~.`┘║
║,;;.,`~~.,,`.;;`,;,└`,;~.;..`;.~.`,,;;,;`;`;~`;`~.;~`;~,.`;`;..`,┘;,~,║
║,;~~~``;~.~~`..,,;..┌.;~`┐;,~`.``~,~,,,,`~~;`,.,.,;;;,~.``~`;;.`~;.;.`║
║;,;,.~~,;.;.,,`;,.`~..;└.;`,```;~.`~`;~.~.`,,.;.;.;`;,;~~~;.;`.,┘``.``║
║.└~~`~,`,;`.;;~.,,.;~~`.~,┘,;;``;`~``;,``~.`~,`..,``.~~,~`.,.~~~~`~`,`║
║└~.`~`,;`,,`.;;~`````;`,;~,`;~`┘;~.~.`~,.~`~`...,;,.;`;.``.~;,.`.`,,`;║
║..,.,;...`.;,.``.~.``;~~,,`;,;,`;`┌;,`.`~;`;,~,~┐`.`.,.``,;~.;~.`.~...║
║`;`.;``,,..,``.~;;,.``,`;~,.,`.`~`~~,`;;,`;;.;.;.,.;`,`~,`~;.,~`;.,;;;║
║~~``.~;~;..,.,~;;~`~``~,;``~.,;`,,,~~``;`;~,;`.`~.```,;.~`~;..;,.;.`~`║
║.;,.~~.``.~~;```,,,,~`;;;,`;`~~.;.``~;,;~.┌...;;;`;~,`.~.,;┐`,`~~;~`;`║
║.,~;~`~;;,;,.,..;.`~,,~;.,`~~.~.,.~,;`~;`~~~,,~.``,.,,,~└`.~,,.~~`┘,`.║
║,~`,;`.~.;.;.`.;~┌;,`~.,`,,.;,.~.;~.;.,,.;,~~,.~`;.~.~,~`.┐;;;`~~`~~~,║
║~`,~`,.;;.~~~~``;,`,`.,~~`.,.,;.;.,.;~.`;...``~.;,,;.`~`,,;;└,,,`.;┘`.║
║`.;;```,;,`~`,;,``.~`;;;..;.;,;`,.;;.``;.`~└`.,;.;,~;;┘,``.~.,;.~.;;~.║
║~;`~,.~~;;~.;~,.,,,,,`.;`,`~~.~`.~;└,..,~;.,,~┘..,``.~,.`..,.,;``;,~.`║
║~,,.,.;.,..,`,~~,~,`└`.;;┘,~;;;;~,`.`;.~~.~.,,;,,,,~.,,..`;,~~;;;,`~,~║
║,;;~,.;.,,~~.;`,`;`..~.;;`.;..`;;~;~~~~.;~~,.,.`.;,;..;;,;;~`;`;.;~~~`║
║;.```└┘,~.```;;`;,.,,`.;;;;;`.~`,,.~,~..`~;.~,`~`.,.;;,`,~;;`,`~;`.;.`║
║;`;,````.~``,;...,;;`;~;`~~``┌~,,.,`~~``,.;.~┐~`.;,`;`.,``...,`~,,,.~;║
║~~;;~;......~;,;``.`~.`.,,;..~`,└~;.┘`;~,.;;`.`;;~~;..`..`,.;;,.`;`,;,║
║;``;~.,~`.``.,``,,,`~.;;`,.~;└~;;;;`~~,`;,,`.┘.,,.`~;..,.`,~.;~..`~.;~║
║`..└,`~~~;..,.;.,;`;.`,`┘```.,,`;.;.`,;;;`;~.;,,.`~.~;,,~.;`~`;~``~`.;║
║,;└,``,,,~,`~~~,,.``;`.;;;;`┘~;``.,;,;;`;~~,..~;`;`~``,~,``.`;;`~,..`,║
║`.`.`,,...```~,..;;;~;`,,;.~,,;;~.└;~``.``.`.~,,┘,,`~~~~,``,`~;,,,~.,`║
║;..~,`.└``┘~~~;`;~`.~~;,;``,`..,`~..~`..```,`,;``;;~;`~.`.;`,`~~`.;,;~║
║.;;,``~`,.~;`.`,,`,;~~.;;,.~,`.,~,~;;.,~.;└;``,.,;.,~```~.`┘;,`;,`,~`;║
║;;.;`~~...`~;`,,~└`~`,~``,;~..~,,~`,;~,,`~;;;`;`.,~,~`,,..┘.;,;.~;,~~~║
║,~`,,..`;~.,~`.;`;,,,`~;;~~~;..~,.`,.`~,;;`;;``.~└┘`;.`,~~``;.``;;.;.~║
║``;,```,`;,.~,~~;`~.~~`.;.``.,;,,....,`~~;~,.;~;```,~.,└;`;,~,.;,..;┘,║
║.`,.`;.`~,~└;`~.`~;,`,~,.`;;.~`,,;``;┘.`;;,`,;;~,,;.~;;~~~`~~~~,~~~..,║
║,.```~;`,~,,`;,~...;`└,.,..``..`,~~,``,,┘;`,.`;;.``..~,.;..`;;,``;;`,.║
╚══════════════════════════════════════════════════════════════════════╝'''

def cleanStr(messStr):
  cleanStr = ''
  for index, letter in enumerate(messStr):
    if letter not in '┌┐└┘.\n':
      cleanStr += '.'
    else:
      cleanStr += letter
  return(cleanStr)

garden = cleanStr(garden)

def splitIntoMultidimList(notMessyString):
  MultidimList = []
  for line in notMessyString.split('\n'):
    MultidimList.append(list(line))
  return MultidimList


def findCorner(multiDimList):
  cornerIndexList = []
  for x,  layer in enumerate(multiDimList):
    for y, char in enumerate(layer):
      if char != '.':
        cornerIndexList.append([x,y,char])
  return cornerIndexList

def makeOverlapCountArray(multiDimList):
  overlapCountArray = []
  for line in multiDimList:
    newLine = []
    for char in line:
      newLine.append(0)
    overlapCountArray.append(newLine)
  return overlapCountArray

def findHorizontalCorner(cornerIndexList, corner):
  shouldNotChange = corner[0]
  ShouldChange = corner[1]
  for cor in cornerIndexList:
    if cor[0] != shouldNotChange:
      continue
    if cor[1] == ShouldChange:
      continue
    diff = abs(cor[1] - ShouldChange)+1
    return diff, cor[1]

def findVerticalCorner(cornerIndexList, corner):
  shouldNotChange = corner[1]
  ShouldChange = corner[0]
  for cor in cornerIndexList:
    if cor[1] != shouldNotChange:
      continue
    if cor[0] == ShouldChange:
      continue
    diff = abs(cor[0] - ShouldChange)+1
    return diff, cor[0]

def findOppositeCornerAndBoxArea(cornerIndexList, corner):
  oppositeCorner = []
  lengthY, lineIndex = findVerticalCorner(cornerIndexList, corner)
  lengthX, columnIndex = findHorizontalCorner(cornerIndexList, corner)
  oppositeCorner = [lineIndex, columnIndex]

  return oppositeCorner , lengthX*lengthY

def findBoxFromCorners(cornerIndexList):
  boxList = []
  areaList = []
  for corner in cornerIndexList:
    if corner[2] == '┌':
      oppositeCorner, area = findOppositeCornerAndBoxArea(cornerIndexList ,corner)
      corner.pop(2)
      boxList.append([corner, oppositeCorner])
      areaList.append(area)
  return boxList, areaList
  
def addOverlapCount(overlapCountArray, box):
  Xmin, Xmax = box[0][0], box[1][0]
  Ymin, Ymax = box[0][1], box[1][1]
  
  for x in range(Xmin, Xmax+1):
    for y in range(Ymin, Ymax+1):
      overlapCountArray[x][y] += 1
  return overlapCountArray
      
def findTotalArea(overlapCountArray):
  totalArea = 0
  for line in overlapCountArray:
    for char in line:
      if char > 0:
        totalArea += 1
  return totalArea

def findSnakeArea(multiDimList):
  overlapCountArray = makeOverlapCountArray(multiDimList)
  cornerIndexList = findCorner(multiDimList)
  boxes, areaList = findBoxFromCorners(cornerIndexList)
  for box in boxes:
    overlapCountArray = addOverlapCount(overlapCountArray, box)
  totalArea = findTotalArea(overlapCountArray)
  
  return totalArea, areaList
  
  



totalArea, areaList = findSnakeArea(splitIntoMultidimList(garden))
numOfSnakes, largestSnakeArea = len(areaList), max(areaList)
print(f'Total area: {totalArea} \nNumber of snakes: {numOfSnakes} \nLargest snake area: {largestSnakeArea}')